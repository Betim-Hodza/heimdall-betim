name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # CMake configuration
  CMAKE_BUILD_TYPE: Release
  CMAKE_CXX_STANDARD: 17
  
  # Build options
  BUILD_LLD_PLUGIN: ON
  BUILD_GOLD_PLUGIN: ON
  BUILD_SHARED_CORE: ON
  BUILD_TESTS: ON
  BUILD_EXAMPLES: ON

# Permissions for security scanning
permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  # Linux Clang builds
  linux-clang:
    name: Linux Clang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [clang-19]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libssl-dev \
          libelf-dev \
          binutils-dev \
          libbfd-dev \
          pkg-config \
          clang-tidy \
          cppcheck \
          binutils-multiarch-dev \
          llvm-19-dev \
          binutils-source
    
    - name: Install LLVM/Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19
        sudo apt-get install -y clang-19 lld-19 llvm-19-dev llvm-19-tools
        # Install additional LLD libraries that might be missing
        sudo apt-get install -y lld-19-dev || echo "lld-19-dev not available"
        sudo apt-get install -y liblld-19-dev || echo "liblld-19-dev not available"
        # Install additional BFD packages
        sudo apt-get install -y binutils-dev binutils-multiarch-dev
        # Install additional LLVM development packages
        sudo apt-get install -y libclang-common-19-dev libclang-rt-19-dev || echo "Additional LLVM dev packages not available"
        # Install additional LLVM development packages that might contain DWARF headers
        sudo apt-get install -y libllvm-19-dev || echo "libllvm-19-dev not available"
        sudo apt-get install -y llvm-19-dev-all || echo "llvm-19-dev-all not available"
        # Install system-wide LLVM headers (like on local system)
        sudo apt-get install -y llvm-19-dev || echo "llvm-19-dev already installed"
        # Try to install additional packages that might provide DWARF headers
        sudo apt-get install -y libllvm-19-dev-all || echo "libllvm-19-dev-all not available"
        
        # Copy DWARF headers from system location to LLVM-19 location if they exist
        if [ -d "/usr/include/llvm/DebugInfo/DWARF" ]; then
          sudo mkdir -p /usr/lib/llvm-19/include/llvm/DebugInfo/
          sudo cp -r /usr/include/llvm/DebugInfo/DWARF /usr/lib/llvm-19/include/llvm/DebugInfo/
          echo "Copied DWARF headers from system location to LLVM-19 location"
        else
          echo "System DWARF headers not found, will rely on LLVM-19 headers"
        fi
    
    - name: Setup llvm-config
      run: |
        # Ensure llvm-config is available in PATH
        sudo ln -sf /usr/lib/llvm-19/bin/llvm-config /usr/local/bin/llvm-config
        echo "llvm-config version: $(llvm-config --version)"
        echo "llvm-config location: $(which llvm-config)"
    
    - name: Debug BFD headers
      run: |
        echo "=== BFD Headers Debug ==="
        find /usr -name "elf-bfd.h" 2>/dev/null || echo "elf-bfd.h not found"
        find /usr -name "bfd.h" 2>/dev/null || echo "bfd.h not found"
        echo "=== Binutils packages ==="
        dpkg -l | grep binutils
        echo "=== End BFD Headers Debug ==="

    - name: Debug LLD libraries
      run: |
        echo "=== LLD Libraries Debug ==="
        echo "=== LLVM 19 lib directory ==="
        ls -la /usr/lib/llvm-19/lib/ | grep -E "(lld|LLVM)" || echo "No LLD/LLVM libraries found"
        echo "=== System lib directory ==="
        ls -la /usr/lib/x86_64-linux-gnu/ | grep -E "(lld|LLVM)" || echo "No LLD/LLVM libraries found"
        echo "=== LLVM config libraries ==="
        /usr/lib/llvm-19/bin/llvm-config --libs || echo "llvm-config failed"
        echo "=== End LLD Libraries Debug ==="

    - name: Debug LLVM headers
      run: |
        echo "=== LLVM Headers Debug ==="
        echo "=== LLVM 19 include directory ==="
        ls -la /usr/lib/llvm-19/include/ | head -20 || echo "LLVM 19 include not found"
        echo "=== LLVM 19 include/llvm directory ==="
        ls -la /usr/lib/llvm-19/include/llvm/ | head -20 || echo "LLVM 19 include/llvm not found"
        echo "=== LLVM 19 include/llvm/DebugInfo ==="
        ls -la /usr/lib/llvm-19/include/llvm/DebugInfo/ 2>/dev/null || echo "LLVM 19 DebugInfo not found"
        echo "=== LLVM config include dir ==="
        /usr/lib/llvm-19/bin/llvm-config --includedir || echo "llvm-config --includedir failed"
        echo "=== End LLVM Headers Debug ==="

    - name: Debug LLD packages
      run: |
        echo "=== LLD Packages Debug ==="
        echo "=== Available LLD packages ==="
        apt-cache search lld-19 | grep -E "(dev|lib)" || echo "No LLD dev packages found"
        echo "=== Installed LLD packages ==="
        dpkg -l | grep lld || echo "No LLD packages installed"
        echo "=== LLD libraries in LLVM lib dir ==="
        find /usr/lib/llvm-19/lib -name "*lld*" 2>/dev/null || echo "No LLD libraries found"
        echo "=== LLD headers in LLVM include dir ==="
        find /usr/lib/llvm-19/include -name "*lld*" 2>/dev/null || echo "No LLD headers found"
        echo "=== End LLD Packages Debug ==="

    - name: Extract elf-bfd.h for BFD support
      run: |
        # Check if elf-bfd.h already exists
        if [ -f "/usr/include/elf-bfd.h" ]; then
          echo "elf-bfd.h already exists in /usr/include/"
          exit 0
        fi
        
        # Try to find binutils source in multiple locations
        BINUTILS_SRC=""
        for src_dir in /usr/src /usr/local/src /opt/src; do
          if [ -d "$src_dir" ]; then
            BINUTILS_SRC=$(find "$src_dir" -maxdepth 2 -type d -name 'binutils*' | head -n1)
            if [ -n "$BINUTILS_SRC" ]; then
              echo "Found binutils source in: $BINUTILS_SRC"
              break
            fi
          fi
        done
        
        if [ -n "$BINUTILS_SRC" ]; then
          ELF_BFD_H=$(find "$BINUTILS_SRC" -name elf-bfd.h | head -n1)
          if [ -n "$ELF_BFD_H" ]; then
            sudo cp "$ELF_BFD_H" /usr/include/
            echo "Copied $ELF_BFD_H to /usr/include/"
          else
            echo "elf-bfd.h not found in binutils source at $BINUTILS_SRC"
            # Fallback: create symlink to bfd.h
            if [ -f "/usr/include/bfd.h" ]; then
              sudo ln -sf /usr/include/bfd.h /usr/include/elf-bfd.h
              echo "Created symlink /usr/include/elf-bfd.h -> /usr/include/bfd.h"
            else
              echo "bfd.h not found either!"; exit 1;
            fi
          fi
        else
          echo "No binutils source found, trying symlink fallback"
          # Fallback: create symlink to bfd.h
          if [ -f "/usr/include/bfd.h" ]; then
            sudo ln -sf /usr/include/bfd.h /usr/include/elf-bfd.h
            echo "Created symlink /usr/include/elf-bfd.h -> /usr/include/bfd.h"
          else
            echo "bfd.h not found!"; exit 1;
          fi
        fi
    
    - name: Set up compiler
      run: |
        echo "CC=clang-19" >> $GITHUB_ENV
        echo "CXX=clang++-19" >> $GITHUB_ENV
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DBUILD_LLD_PLUGIN=${{ env.BUILD_LLD_PLUGIN }} \
          -DBUILD_GOLD_PLUGIN=${{ env.BUILD_GOLD_PLUGIN }} \
          -DBUILD_SHARED_CORE=${{ env.BUILD_SHARED_CORE }} \
          -DBUILD_TESTS=${{ env.BUILD_TESTS }} \
          -DBUILD_EXAMPLES=${{ env.BUILD_EXAMPLES }} \
          -DLLVM_DIR=/usr/lib/llvm-19/lib/cmake/llvm \
          -DCMAKE_POLICY_DEFAULT_CMP0135=NEW
    
    - name: Build
      run: |
        cmake --build build --parallel $(nproc)

    - name: Build plugins
      run: |
        cmake --build build --target heimdall-lld heimdall-gold

    - name: List plugin files
      run: |
        find build/ -name "*.so" -o -name "*.dylib" | head -10

    - name: Run tests
      run: |
        cmake --build build --target test
        ctest --test-dir build --output-on-failure --timeout 300
      env:
        HEIMDALL_TEST_DATA_DIR: ${{ github.workspace }}/tests/data 