key,rule,severity,type,component,project,file_path,line,message,status,effort,debt,author,tags,creationDate,updateDate,closeDate
AZfh0jFY_yZdEi8IfXnu,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,47,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXnv,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,49,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXnw,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,56,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXnz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,62,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn0,cpp:S924,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,71,"Reduce the number of nested ""break"" statements from 2 to 1 authorized.",OPEN,20min,20min,tbakker@example.com,"based-on-misra,confusing",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXnx,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,73,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFY_yZdEi8IfXn1,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,74,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXny,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,74,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFY_yZdEi8IfXn2,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,78,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,82,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,86,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn5,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,90,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn6,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,106,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn7,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,106,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXn8,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,110,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXn-,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,143,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXn9,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,151,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFY_yZdEi8IfXn_,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,173,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoA,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,173,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoB,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,177,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoC,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,200,"Use the init-statement to declare ""oldFile"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoD,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,203,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoE,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,205,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoF,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,212,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoG,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,214,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,258,"Use the init-statement to declare ""sbomFile"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoJ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,261,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,263,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoI,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,270,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFY_yZdEi8IfXoL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,270,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,272,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoN,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,290,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoO,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,300,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoP,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,300,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoQ,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,301,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXnr,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,308,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoR,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,329,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoS,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,338,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXoT,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,341,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoU,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,341,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoV,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,353,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoW,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,363,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoX,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,395,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoY,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,397,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoZ,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,411,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoa,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,426,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXob,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,457,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoc,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,464,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXod,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,465,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoe,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,489,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXof,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,491,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXog,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,503,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoh,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,505,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoi,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,530,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoj,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,532,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXok,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,533,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXol,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,534,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXom,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,535,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXon,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,540,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoo,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,541,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXop,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,542,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXoq,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,543,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXns,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,598,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXor,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,620,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXnt,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,621,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXos,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,635,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFY_yZdEi8IfXnq,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,639,"'gmtime' is deprecated: This function or variable may be unsafe. Consider using gmtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,tbakker@example.com,"cert,cwe,obsolete",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXot,cpp:S1912,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,639,"Replace this call to the non reentrant function ""gmtime"" by a call to ""gmtime_r"".",OPEN,30min,30min,tbakker@example.com,multi-threading,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFY_yZdEi8IfXou,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.cpp,639,"Replace this use of ""gmtime"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,tbakker@example.com,"confusing,since-c++20",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jGK_yZdEi8IfXo1,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,15,"Give class ""SBOMComponent"" a noexcept move constructor.",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jGK_yZdEi8IfXoy,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,22,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jGK_yZdEi8IfXo0,cpp:S6186,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,29,"Keep operator== and remove operator!= for operand types ""SBOMComponent"" and ""SBOMComponent"".",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++20",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jGK_yZdEi8IfXo2,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,36,"Give class ""SBOMDifference"" a noexcept move constructor.",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jGK_yZdEi8IfXoz,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMComparator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMComparator.hpp,160,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFK_yZdEi8IfXnR,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,33,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnS,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,36,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnT,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,45,Refactor this function to reduce its Cognitive Complexity from 28 to the 25 allowed.,CLOSED,8min,8min,tbakker@example.com,"architecture,brain-overload",2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFK_yZdEi8IfXnU,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,112,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnV,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,112,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFK_yZdEi8IfXnW,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,115,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnX,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,118,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnY,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,121,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnZ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,124,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXna,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,127,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnb,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,130,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnc,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,138,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnd,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,144,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnf,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,176,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXne,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,184,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jFK_yZdEi8IfXng,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,201,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnh,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,201,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFK_yZdEi8IfXni,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,204,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnj,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,207,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnk,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,210,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnl,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,213,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnm,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,216,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXnn,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,238,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jFK_yZdEi8IfXno,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,238,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jFK_yZdEi8IfXnp,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.cpp,242,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jF6_yZdEi8IfXox,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,13,"Give class ""ValidationResult"" a noexcept move constructor.",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jF6_yZdEi8IfXov,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,17,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jF6_yZdEi8IfXow,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMValidator.hpp,Heimdall-SBOM_heimdall,src/common/SBOMValidator.hpp,28,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXo3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,43,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jHE_yZdEi8IfXo4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,45,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jHE_yZdEi8IfXo5,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,53,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jHE_yZdEi8IfXo6,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,55,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T22:17:41+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfh0jHE_yZdEi8IfXo7,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,73,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXo8,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,75,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXo_,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,139,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpA,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,141,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXo9,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,180,"Reduce verbosity with ""using enum"" for ""heimdall::SBOMDifference::Type"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXo-,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,192,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T22:17:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfh0jHE_yZdEi8IfXpB,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,220,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpC,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,222,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpD,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,224,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpE,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,266,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpF,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,268,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpG,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,270,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0jHE_yZdEi8IfXpH,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/tools/heimdall-validate.cpp,Heimdall-SBOM_heimdall,src/tools/heimdall-validate.cpp,272,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0i-b_yZdEi8IfXnQ,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_sbom_validation.cpp,Heimdall-SBOM_heimdall,tests/test_sbom_validation.cpp,7,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfh0i-b_yZdEi8IfXnP,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_sbom_validation.cpp,Heimdall-SBOM_heimdall,tests/test_sbom_validation.cpp,170,unused variable 'comparator',OPEN,5min,5min,tbakker@example.com,unused,2025-07-06T22:17:41+0000,2025-07-06T22:17:49+0000,
AZfhtSmp0DsrBC_W8U-Z,python:S1192,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/sonarqube_issues_to_csv.py,Heimdall-SBOM_heimdall,scripts/sonarqube_issues_to_csv.py,216,Define a constant instead of duplicating this literal '.xlsx' 4 times.,CLOSED,8min,8min,tbakker@example.com,design,2025-07-06T21:45:34+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhtSmp0DsrBC_W8U-a,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/sonarqube_issues_to_csv.py,Heimdall-SBOM_heimdall,scripts/sonarqube_issues_to_csv.py,316,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:45:34+0000,2025-07-06T21:46:54+0000,
AZfhtSmp0DsrBC_W8U-b,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/sonarqube_issues_to_csv.py,Heimdall-SBOM_heimdall,scripts/sonarqube_issues_to_csv.py,320,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:45:34+0000,2025-07-06T21:46:54+0000,
AZfhrTMY_yZdEi8Iese1,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,266,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese2,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,274,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese3,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,460,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese4,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,531,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,CLOSED,9min,9min,tbakker@example.com,"architecture,brain-overload",2025-07-06T21:36:51+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhrTMY_yZdEi8Iese6,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,729,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese7,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,742,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese8,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,755,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTMY_yZdEi8Iese5,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,768,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T21:36:51+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhrTN1_yZdEi8Iese-,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,31,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T21:36:51+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhrTNf_yZdEi8Iese9,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,43,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T21:36:51+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhrTGx_yZdEi8Iesey,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,44,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTGx_yZdEi8Iesez,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,272,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhrTGx_yZdEi8Iese0,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,301,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,tbakker@example.com,clumsy,2025-07-06T21:36:51+0000,2025-07-06T21:36:51+0000,
AZfhkua10DsrBC_W7hIs,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,636,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T21:07:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfhkua10DsrBC_W7hIt,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,637,"Make the type of this parameter a reference-to-const. The current type of ""functions"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T21:07:55+0000,2025-07-06T21:07:55+0000,
AZfhkuc90DsrBC_W7hIu,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,45,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T21:07:55+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhkAy8_yZdEi8IeE5K,python:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,15,Refactor this function to reduce its Cognitive Complexity from 27 to the 15 allowed.,OPEN,17min,17min,tbakker@example.com,"architecture,brain-overload",2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5L,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,112,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5M,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,127,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5N,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,167,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5O,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,169,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5P,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,183,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5Q,python:S3457,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,185,Add replacement fields or use a normal string instead of an f-string.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfhkAy8_yZdEi8IeE5R,python:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:scripts/validate_sboms_online.py,Heimdall-SBOM_heimdall,scripts/validate_sboms_online.py,194,Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.,OPEN,7min,7min,tbakker@example.com,"architecture,brain-overload",2025-07-06T21:06:15+0000,2025-07-06T21:06:22+0000,
AZfheZP3PrcFnnHeXuq5,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,65,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T20:41:46+0000,2025-07-06T20:41:46+0000,
AZfheZP3PrcFnnHeXuq6,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,129,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T20:41:46+0000,2025-07-06T20:41:46+0000,
AZfhboKpXXsaA10sd_U8,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1671,"Use the init-statement to declare ""functions"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T20:28:16+0000,2025-07-06T20:28:16+0000,
AZfhboMkXXsaA10sd_U9,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,152,Refactor this function to reduce its Cognitive Complexity from 27 to the 25 allowed.,CLOSED,7min,7min,tbakker@example.com,"architecture,brain-overload",2025-07-06T20:28:16+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhboMkXXsaA10sd_U_,cpp:S6010,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,168,"Change type of ""sourceFile"" to ""std::filesystem::path"".",OPEN,15min,15min,tbakker@example.com,"clumsy,performance,since-c++17",2025-07-06T20:28:16+0000,2025-07-06T20:28:16+0000,
AZfhboMkXXsaA10sd_U-,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,172,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T20:28:16+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhboMkXXsaA10sd_VA,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,172,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:28:16+0000,2025-07-06T20:28:16+0000,
AZfhboMkXXsaA10sd_VC,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,431,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T20:28:16+0000,2025-07-06T20:28:16+0000,
AZfhboMkXXsaA10sd_VB,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,444,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T20:28:16+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfhZ6pH_yZdEi8IdFAC,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,372,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAD,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,373,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAE,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,374,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAF,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,375,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAG,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,424,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAH,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,425,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAI,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,426,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAJ,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,427,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAK,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,458,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAL,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,459,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAM,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,460,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAN,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,461,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAO,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,518,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAP,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,519,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAQ,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,520,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAR,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,521,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAS,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,594,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAT,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,596,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAU,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,598,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAV,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,600,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhZ6pH_yZdEi8IdFAW,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,601,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T20:21:49+0000,2025-07-06T20:21:49+0000,
AZfhScr6OVcFHjCfYyuM,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,595,"Use ""contains"" member function.",OPEN,2min,2min,developer@heimdall.dev,"clumsy,since-c++20",2025-07-06T19:49:09+0000,2025-07-06T19:49:09+0000,
AZfhScr6OVcFHjCfYyuO,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,597,"Use ""contains"" member function.",OPEN,2min,2min,developer@heimdall.dev,"clumsy,since-c++20",2025-07-06T19:49:09+0000,2025-07-06T19:49:09+0000,
AZfhScr6OVcFHjCfYyuL,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,599,"Use ""contains"" member function.",OPEN,2min,2min,developer@heimdall.dev,"clumsy,since-c++20",2025-07-06T19:49:09+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,31,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuQ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,42,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuS,cpp:S6010,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,81,"Change type of ""ubuntuLibDir"" to ""std::filesystem::path"".",OPEN,15min,15min,developer@heimdall.dev,"clumsy,performance,since-c++17",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuR,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,82,"Use the init-statement to declare ""ubuntuLibDir"" inside the if statement.",OPEN,2min,2min,developer@heimdall.dev,"clumsy,since-c++17",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuV,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,86,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuW,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,87,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuU,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,88,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3COVcFHjCfYyuT,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:simple_test.cpp,Heimdall-SBOM_heimdall,simple_test.cpp,89,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3POVcFHjCfYyuX,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_simple.cpp,Heimdall-SBOM_heimdall,test_plugin_simple.cpp,7,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3POVcFHjCfYyuY,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_simple.cpp,Heimdall-SBOM_heimdall,test_plugin_simple.cpp,8,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3POVcFHjCfYyuZ,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_simple.cpp,Heimdall-SBOM_heimdall,test_plugin_simple.cpp,9,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3POVcFHjCfYyua,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_simple.cpp,Heimdall-SBOM_heimdall,test_plugin_simple.cpp,10,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhSc3POVcFHjCfYyub,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_simple.cpp,Heimdall-SBOM_heimdall,test_plugin_simple.cpp,11,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:49:01+0000,2025-07-06T19:49:09+0000,
AZfhLjRF_yZdEi8IbfLv,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,712,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:18:11+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfhLjRF_yZdEi8IbfLw,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,723,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,developer@heimdall.dev,"clumsy,since-c++23",2025-07-06T19:18:11+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfhLjTu_yZdEi8IbfL3,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:debug_library_detection.cpp,Heimdall-SBOM_heimdall,debug_library_detection.cpp,7,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,developer@heimdall.dev,"architecture,brain-overload",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTu_yZdEi8IbfL4,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:debug_library_detection.cpp,Heimdall-SBOM_heimdall,debug_library_detection.cpp,51,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,developer@heimdall.dev,brain-overload,2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTj_yZdEi8IbfLx,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_direct.cpp,Heimdall-SBOM_heimdall,test_plugin_direct.cpp,7,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTj_yZdEi8IbfLy,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_direct.cpp,Heimdall-SBOM_heimdall,test_plugin_direct.cpp,8,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTj_yZdEi8IbfLz,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_direct.cpp,Heimdall-SBOM_heimdall,test_plugin_direct.cpp,9,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTj_yZdEi8IbfL0,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_direct.cpp,Heimdall-SBOM_heimdall,test_plugin_direct.cpp,10,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfhLjTj_yZdEi8IbfL1,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:test_plugin_direct.cpp,Heimdall-SBOM_heimdall,test_plugin_direct.cpp,11,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,developer@heimdall.dev,"cppcoreguidelines,design,since-c++11",2025-07-06T19:18:02+0000,2025-07-06T19:18:11+0000,
AZfgY2j1XXsaA10sYmd9,cpp:S6010,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,130,"Change type of ""fullPath"" to ""std::filesystem::path"".",OPEN,15min,15min,tbakker@example.com,"clumsy,performance,since-c++17",2025-07-06T15:37:13+0000,2025-07-06T15:37:13+0000,
AZfgRD8pXXsaA10sX6cE,cpp:S1820,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.hpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.hpp,81,"Refactor this structure so it has no more than 20 fields, rather than the 23 it currently has.",OPEN,1h,1h,tbakker@example.com,brain-overload,2025-07-06T15:02:13+0000,2025-07-06T20:28:16+0000,
AZfgRD5RXXsaA10sX6cD,cpp:S3624,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,64,Customize this class' copy constructor to participate in resource management. Customize or delete its copy assignment operator. Also consider whether move operations should be customized.,CLOSED,30min,30min,tbakker@example.com,"cert,leak,pitfall",2025-07-06T15:02:13+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZfgPZAdPrcFnnHeQ4ud,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1472,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgPZAdPrcFnnHeQ4ue,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1490,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgPZAdPrcFnnHeQ4uf,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1491,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgPZAdPrcFnnHeQ4ug,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1550,Define each identifier in a dedicated statement.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,convention",2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgPZAdPrcFnnHeQ4uh,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1559,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgPZAdPrcFnnHeQ4ui,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1608,"Use the init-statement to declare ""memberName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T14:56:40+0000,2025-07-06T14:56:40+0000,
AZfgJZ9bqk9ledNQJxit,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,69,"Use the init-statement to declare ""moduleName"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-06T14:29:07+0000,2025-07-06T14:29:07+0000,
AZfgJZ9bqk9ledNQJxiu,cpp:S5350,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,74,"Make the type of this variable a reference-to-const. The current type of ""F"" is ""class llvm::Function &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,based-on-misra",2025-07-06T14:29:07+0000,2025-07-06T14:29:07+0000,
AZfgJZ9bqk9ledNQJxiv,cpp:S5350,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,84,"Make the type of this variable a reference-to-const. The current type of ""GV"" is ""class llvm::GlobalVariable &"".",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,based-on-misra",2025-07-06T14:29:07+0000,2025-07-06T14:29:07+0000,
AZfgE1yfqk9ledNQJRHd,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,587,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T14:08:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZfgE105qk9ledNQJRHf,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,94,"Make the type of this parameter a pointer-to-const. The current type of this unnamed parameter is ""void *"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T14:08:55+0000,2025-07-06T14:08:55+0000,
AZfgE10kqk9ledNQJRHe,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,116,"Make the type of this parameter a pointer-to-const. The current type of this unnamed parameter is ""void *"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T14:08:55+0000,2025-07-06T14:08:55+0000,
AZff8_GAqk9ledNQIyh4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,80,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_GAqk9ledNQIyhx,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,97,"Remove this use of the constructor's initializer list for data member ""wasProcessed"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyhy,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,98,"Remove this use of the constructor's initializer list for data member ""detectedBy"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyhz,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,99,"Remove this use of the constructor's initializer list for data member ""isSystemLibrary"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh0,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,100,"Remove this use of the constructor's initializer list for data member ""containsDebugInfo"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh1,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,101,"Remove this use of the constructor's initializer list for data member ""isStripped"". It is redundant with the in-class initializer.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh5,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,129,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh6,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,137,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh7,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,145,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh8,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,153,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh9,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,169,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh-,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,184,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh2,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,247,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GAqk9ledNQIyh3,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,266,"Reduce verbosity with ""using enum"" for ""heimdall::LinkerType"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_GRqk9ledNQIyh_,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,523,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_GRqk9ledNQIyiA,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,524,"Make the type of this parameter a reference-to-const. The current type of ""sourceFiles"" is ""class std::vector<class std::basic_string<char> > &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygB,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,233,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygC,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,258,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygD,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,322,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygE,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,326,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygF,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,335,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygG,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,352,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygH,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,352,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygI,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,373,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygJ,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,389,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygM,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,405,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygK,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,410,"Use the init-statement to declare ""version"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,416,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygP,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,424,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygN,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,429,"Use the init-statement to declare ""version"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygO,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,435,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygR,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,443,"This function should be declared ""const"".",CLOSED,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygQ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,473,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygS,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,572,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygT,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,572,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygU,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,593,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygV,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,593,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygW,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,593,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygX,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,593,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygY,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,745,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygZ,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,745,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyga,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,745,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygb,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,745,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygc,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,843,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygd,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,851,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyge,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,851,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygf,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,851,"Remove the unused parameter ""buildId"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygg,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,851,"Make the type of this parameter a reference-to-const. The current type of ""buildId"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygh,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,966,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygi,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,966,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygj,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1048,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygk,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1048,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygl,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1048,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygm,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1048,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygn,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1158,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygo,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1158,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygp,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1159,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygq,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1159,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygr,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1241,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygs,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1241,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygt,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1241,"Remove the unused parameter ""version"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygu,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1241,"Make the type of this parameter a reference-to-const. The current type of ""version"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygv,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1247,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygw,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1247,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygx,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1247,"Remove the unused parameter ""uuid"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIygy,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1247,"Make the type of this parameter a reference-to-const. The current type of ""uuid"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg0,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1344,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg1,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1344,"Remove the unused parameter ""symbols"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg2,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1344,"Make the type of this parameter a reference-to-const. The current type of ""symbols"" is ""class std::vector<struct heimdall::SymbolInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIygz,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1344,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg3,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1350,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg4,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1350,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg5,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1350,"Remove the unused parameter ""sections"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg6,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1350,"Make the type of this parameter a reference-to-const. The current type of ""sections"" is ""class std::vector<struct heimdall::SectionInfo> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg-,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1356,"Make the type of this parameter a reference-to-const. The current type of ""version"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg7,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1356,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyg8,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1356,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg9,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1356,"Remove the unused parameter ""version"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyg_,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1362,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhA,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1362,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyhB,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1362,"Remove the unused parameter ""company"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fhqk9ledNQIyhC,cpp:S995,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1362,"Make the type of this parameter a reference-to-const. The current type of ""company"" is ""class std::basic_string<char> &"".",OPEN,2min,2min,tbakker@example.com,"bad-practice,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhE,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1615,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhJ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1653,"Use the init-statement to declare ""sourceFiles"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhK,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1662,"Use the init-statement to declare ""compileUnits"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhL,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1723,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhM,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1736,"Use the init-statement to declare ""normalizedPath"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fhqk9ledNQIyhN,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1736,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhO,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1738,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1740,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhQ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1742,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhR,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1744,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhS,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1755,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhT,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1757,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhU,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1759,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhV,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1761,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhW,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1763,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhX,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2086,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fiqk9ledNQIyhY,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2086,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhZ,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2105,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fiqk9ledNQIyha,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2105,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Fiqk9ledNQIyhb,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2115,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fiqk9ledNQIyhc,cpp:S1172,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2115,"Remove the unused parameter ""filePath"", make it unnamed, or declare it ""[[maybe_unused]]"".",CLOSED,5min,5min,tbakker@example.com,"based-on-misra,cert,unused",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_FEqk9ledNQIyf8,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,113,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_FEqk9ledNQIyf9,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,274,"Replace this range for-loop by ""std::ranges::any_of"".",OPEN,5min,5min,tbakker@example.com,"clumsy,cppcoreguidelines",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_FEqk9ledNQIyf-,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,288,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_FEqk9ledNQIyf_,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,299,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_FEqk9ledNQIygA,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,359,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhf,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,139,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhh,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,155,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhi,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,226,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhj,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,250,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhk,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,291,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhl,cpp:S5566,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,292,"Replace this range for-loop by ""std::ranges::contains"".",OPEN,5min,5min,tbakker@example.com,"clumsy,cppcoreguidelines",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhm,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,292,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhn,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,310,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhg,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,313,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhd,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,352,declaration shadows a field of 'heimdall::SBOMGenerator::Impl',OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,pitfall,suspicious",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhe,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,371,declaration shadows a field of 'heimdall::SBOMGenerator::Impl',OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,pitfall,suspicious",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyho,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,417,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhp,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,424,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhq,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,495,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhr,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,550,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhs,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,645,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyht,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,654,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhu,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,663,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhv,cpp:S6005,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,666,Replace this declaration by a structured binding declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Fwqk9ledNQIyhw,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,677,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiB,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,142,"Use the init-statement to declare ""md"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiC,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,155,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,tbakker@example.com,clumsy,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiD,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,203,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiE,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,258,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiF,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,258,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiG,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,271,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiH,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,271,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiI,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,285,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiJ,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,285,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiK,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,301,"Use the init-statement to declare ""buffer"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,346,"Use the init-statement to declare ""libPath"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,404,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiN,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,406,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiO,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,408,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,410,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiQ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,412,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiR,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,413,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiS,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,429,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiT,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,503,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiU,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,506,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gnqk9ledNQIyiV,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,610,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiW,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,616,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiX,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,621,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiY,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,624,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyiZ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,627,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyia,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,630,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyib,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,635,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyic,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,638,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyid,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,643,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyie,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,646,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyif,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,662,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyig,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,665,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyih,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,668,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_Gnqk9ledNQIyii,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,671,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff8_HEqk9ledNQIyip,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,63,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_HEqk9ledNQIyiq,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,77,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_HPqk9ledNQIyit,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,204,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_HPqk9ledNQIyiu,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,239,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_HPqk9ledNQIyiv,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,267,Refactor this function to reduce its Cognitive Complexity from 26 to the 25 allowed.,CLOSED,6min,6min,tbakker@example.com,"architecture,brain-overload",2025-07-06T13:34:33+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff8_HPqk9ledNQIyiw,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,354,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T13:34:33+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff8_Gwqk9ledNQIyil,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,160,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_Gwqk9ledNQIyij,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,211,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_EUqk9ledNQIyf4,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_metadata_extractor_extended.cpp,Heimdall-SBOM_heimdall,tests/test_metadata_extractor_extended.cpp,160,Value stored to 'found_data_section' is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_BHqk9ledNQIyfw,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,273,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_BHqk9ledNQIyfz,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,619,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8_BHqk9ledNQIyf0,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,623,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff8-_Nqk9ledNQIyfv,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils_extended.cpp,Heimdall-SBOM_heimdall,tests/test_utils_extended.cpp,204,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-06T13:34:33+0000,2025-07-06T13:34:33+0000,
AZff4d-p6D22xePu4wUV,docker:S7018,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,16,Sort these package names alphanumerically.,OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-p6D22xePu4wUY,docker:S7018,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,32,Sort these package names alphanumerically.,OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-p6D22xePu4wUb,docker:S6597,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,58,"WORKDIR instruction should be used instead of ""cd"" command.",OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-p6D22xePu4wUc,docker:S7018,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,67,Sort these package names alphanumerically.,OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-p6D22xePu4wUe,docker:S7018,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,102,Sort these package names alphanumerically.,OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-p6D22xePu4wUh,docker:S7019,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:Dockerfile,Heimdall-SBOM_heimdall,Dockerfile,142,Consider wrapping this instruction in a script file and call it with exec form.,OPEN,5min,5min,tbakker@example.com,,2025-07-06T13:00:22+0000,2025-07-06T13:14:37+0000,
AZff4d-d6D22xePu4wTw,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,29,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-d6D22xePu4wTv,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,126,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,performance",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wT4,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,29,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wT6,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,30,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wT8,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,32,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wT-,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,33,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wUA,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,34,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wT1,cpp:S1144,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,41,unused function 'fileExists',CLOSED,2min,2min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T23:53:57+0000,2025-07-06T23:53:57+0000
AZff4d-h6D22xePu4wUC,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,68,"""catch"" a specific exception type.",OPEN,20min,20min,tbakker@example.com,error-handling,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUI,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,184,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUH,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,207,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-h6D22xePu4wUL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,282,"Use the init-statement to declare ""sbomFile"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUO,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,333,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUP,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,362,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUQ,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,363,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUR,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,364,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUS,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,368,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wUT,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,374,Convert this string literal to a raw string literal.,OPEN,2min,2min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKn,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKo,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,34,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKp,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,47,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5l,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,68,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5m,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,69,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5n,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,70,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5o,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,73,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5p,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,77,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5q,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,81,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5r,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,103,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKq,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,160,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKr,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,183,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKs,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,203,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKt,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,219,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKu,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,230,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKv,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,244,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKw,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,255,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKx,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,329,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5s,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,347,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5t,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,349,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5u,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,402,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5v,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,420,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5w,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,444,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5x,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,462,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5y,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,478,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5z,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,494,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v50,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,516,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v51,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,532,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v52,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,550,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v53,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,570,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v54,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,594,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v55,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,610,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v56,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,626,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v57,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,642,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v58,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,658,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v59,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,674,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5-,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,690,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v5_,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,710,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6A,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,730,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6B,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,746,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6C,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,762,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6D,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,778,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6E,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,794,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6F,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,810,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6G,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,841,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6H,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,872,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6I,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1078,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6J,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1081,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6K,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1214,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6L,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1258,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6M,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1289,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6N,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1321,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6O,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1334,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6P,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1349,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6Q,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1352,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6R,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1411,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6S,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1424,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6T,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1427,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6U,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1464,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6V,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1478,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6W,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1526,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6X,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1608,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6Y,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1622,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6Z,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1654,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6a,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1666,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6b,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1669,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6c,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1672,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6d,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1732,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6e,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1765,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6f,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1802,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6g,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1833,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6h,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1861,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6i,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1888,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6j,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1932,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6k,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1974,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6l,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1977,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6m,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,1980,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6n,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2012,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6o,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2030,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6p,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2048,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6q,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2084,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6r,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2166,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6s,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2169,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6t,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2172,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6u,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2185,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6v,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2223,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6w,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2246,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6x,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2268,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6y,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2271,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6z,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2295,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v60,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2304,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v61,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2318,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v62,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2365,Remove this #undef directive.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKy,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2380,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7b,cpp:S954,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2426,"Move all #include directives to the very top of the file, before any code.",OPEN,10min,10min,tbakker@example.com,"confusing,misra-c++2008,misra-c2004,misra-c2012",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v63,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2433,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v64,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2483,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v65,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2493,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v66,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2504,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v67,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2512,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH3,cpp:S5825,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2633,"Define the type with ""typedef"" or ""using"" instead of using a macro.",OPEN,15min,15min,tbakker@example.com,"bad-practice,cert,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v68,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2949,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v69,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2959,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6-,cpp:S5028,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,2963,"Replace this macro by ""const"", ""constexpr"" or an ""enum"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wKz,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3030,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7d,cpp:S7035,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3042,"Use an intermediary ""std::to_underlying"" to cast an enum to an integral type that is not the underlying type.",OPEN,15min,15min,tbakker@example.com,"pitfall,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7e,cpp:S7035,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3043,"Use an intermediary ""std::to_underlying"" to cast an enum to an integral type that is not the underlying type.",OPEN,15min,15min,tbakker@example.com,"pitfall,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7c,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3045,"Use the init-statement to declare ""r_index"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK0,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3047,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK1,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3062,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK2,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3069,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK3,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3080,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7f,cpp:S108,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3109,"Fill this compound statement, remove it, or add a nested comment explaining why it is empty.",OPEN,5min,5min,tbakker@example.com,suspicious,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK4,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3144,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK5,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3157,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7g,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3175,"Replace this conversion operator with a function or (C++11) add the ""explicit"" keyword.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK6,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3184,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK7,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3186,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK8,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3203,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7h,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3211,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7i,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3211,"Replace the use of ""::type"" with ""std::remove_reference_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK9,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3360,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK-,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3379,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wK_,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3392,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLA,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3394,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLB,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3396,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7j,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3427,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7k,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3427,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7l,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3433,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7m,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3433,"Replace the use of ""::value"" with ""std::is_object_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLC,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3445,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLD,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3447,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLE,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3458,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLF,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3467,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLG,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3478,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLH,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3487,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLI,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3489,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLJ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3491,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLK,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3509,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8Y,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3606,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8Z,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3606,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8a,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3607,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8d,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3672,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8e,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3677,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8f,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3687,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8g,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3692,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8h,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3702,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8i,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3707,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8j,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3723,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8k,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3820,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8l,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3884,"Replace the use of ""::type"" with ""std::add_lvalue_reference_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8m,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3896,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8n,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3896,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8o,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3922,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8p,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3946,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8q,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3953,"Replace the use of ""::value"" with ""std::is_move_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8r,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3954,"Replace the use of ""::value"" with ""std::is_copy_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8s,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,3957,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8t,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4002,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8u,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4007,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8v,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4024,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8w,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4024,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8x,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4031,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8y,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4031,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8z,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4035,"Replace the use of ""::value"" with ""std::is_move_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v80,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4036,"Replace the use of ""::value"" with ""std::is_copy_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v81,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4042,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v82,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4049,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v83,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4069,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v84,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4069,"Replace the use of ""::value"" with ""std::is_integral_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v85,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4070,"Replace the use of ""::value"" with ""std::is_integral_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v86,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4071,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v87,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4095,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v88,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4148,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v89,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4150,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8-,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4166,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8_,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4179,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9A,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4195,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9B,cpp:S3642,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4201,"Replace this ""enum"" with ""enum class"".",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9C,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4205,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9D,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4205,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBw,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4206,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9E,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4211,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9F,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4211,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9G,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4233,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9H,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4237,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9I,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4238,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9J,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4246,"Replace the use of ""::type"" with ""std::common_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9K,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4256,"Replace the use of ""::type"" with ""std::common_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9L,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4266,"Replace the use of ""::type"" with ""std::common_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9M,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4276,"Replace the use of ""::type"" with ""std::common_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9N,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4284,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9O,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4324,"Replace the use of ""::type"" with ""std::remove_extent_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9P,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4325,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9Q,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4326,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9R,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4327,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9S,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4329,"Replace the use of ""::value"" with ""std::is_array_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9T,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4329,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9U,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4330,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9V,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4330,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLL,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4366,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLM,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4381,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLN,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4383,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9X,cpp:S6024,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4414,"Prefer free functions over member functions when handling objects of generic type ""StringType"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9Y,cpp:S1186,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4422,"Add a nested comment explaining why this method is empty, or complete the implementation.",OPEN,5min,5min,tbakker@example.com,suspicious,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9Z,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4449,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9a,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4454,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9b,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4460,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9d,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4467,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9c,cpp:S6008,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4471,Replace this recursive call with a fold expression.,OPEN,1h,1h,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9f,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4475,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9e,cpp:S6008,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4480,Replace this recursive call with a fold expression.,OPEN,1h,1h,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9i,cpp:S6024,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4483,"Prefer free functions over member functions when handling objects of generic type ""Arg"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9h,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4484,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9g,cpp:S6008,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4490,Replace this recursive call with a fold expression.,OPEN,1h,1h,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9l,cpp:S6024,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4493,"Prefer free functions over member functions when handling objects of generic type ""Arg"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9k,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4494,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9j,cpp:S6008,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4501,Replace this recursive call with a fold expression.,OPEN,1h,1h,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9m,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4667,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9n,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4675,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9o,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4711,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9p,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4729,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9q,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4746,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9r,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4763,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLO,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4782,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLP,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4784,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLQ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4786,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLR,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4797,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLS,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4810,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLT,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4821,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLU,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4842,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLV,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4844,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLW,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4846,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9s,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4865,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9t,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4889,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9u,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4889,"Replace the use of ""::value"" with ""std::is_arithmetic_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9v,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4890,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9w,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4895,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9x,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4927,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9y,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4937,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9z,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4946,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v90,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4947,"Replace the use of ""::value"" with ""std::is_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v91,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4948,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v92,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4949,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v93,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4953,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v94,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4981,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v95,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4981,"Replace the use of ""::value"" with ""std::is_enum_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v96,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4984,"Replace the use of ""::type"" with ""std::underlying_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v97,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4992,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v98,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,4995,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v99,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5009,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9-,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5012,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v9_,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5017,"Replace with the version of ""std::ranges::transform"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-A,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5073,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-B,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5100,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-C,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5101,"Replace the use of ""::value"" with ""std::is_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-D,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5113,"Replace with the version of ""std::ranges::transform"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-E,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5124,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-F,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5125,"Replace the use of ""::value"" with ""std::is_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-G,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5133,"Replace with the version of ""std::ranges::transform"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-H,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5145,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v-I,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5149,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-J,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5157,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-K,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5176,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-L,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5187,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-M,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5196,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-N,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5199,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-O,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5207,"Replace with the version of ""std::ranges::transform"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-P,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5222,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-Q,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5223,"Replace the use of ""::value"" with ""std::is_arithmetic_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-R,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5224,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-S,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5225,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-T,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5226,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-U,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5227,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-V,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5232,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-W,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5278,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-X,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5306,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-Y,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5315,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-Z,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5315,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-a,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5319,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-b,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5326,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-c,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5335,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-d,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5335,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-e,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5339,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-f,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5346,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-g,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5358,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-h,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5367,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLX,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5402,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLY,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5413,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLZ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5429,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLa,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5449,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLb,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5451,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLc,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5453,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLd,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5467,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLe,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5493,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-k,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5508,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-l,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5508,"Replace the use of ""::type"" with ""std::remove_reference_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-m,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5525,"Replace the use of ""::value"" with ""std::is_nothrow_move_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-n,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5526,"Replace the use of ""::value"" with ""std::is_nothrow_default_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-i,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5534,"The move constructor of ""iteration_proxy_value"" should be unconditionally declared as ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-o,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5535,"Replace the use of ""::value"" with ""std::is_nothrow_move_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-p,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5536,"Replace the use of ""::value"" with ""std::is_nothrow_move_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-j,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5537,"The move assignment operator of ""iteration_proxy_value"" should be unconditionally declared as ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-q,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5538,"Replace the use of ""::value"" with ""std::is_nothrow_move_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-r,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5539,"Replace the use of ""::value"" with ""std::is_nothrow_move_assignable_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKm,cpp:S6186,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5566,"Keep operator== and remove operator!= for operand types ""iteration_proxy_value"" and ""iteration_proxy_value"".",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-s,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5583,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-t,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5656,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-u,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5664,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLf,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5708,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLg,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5710,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLh,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5712,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLi,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5714,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-v,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5769,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-w,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5769,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-x,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5865,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-y,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5865,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-0,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5895,"Replace the use of ""::value"" with ""std::is_convertible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-z,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5895,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-1,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5904,"Replace with the version of ""std::ranges::copy"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-2,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5935,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-3,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5935,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-4,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5955,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-5,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5955,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-6,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5970,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-7,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5970,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-8,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5977,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-9,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5978,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v--,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5979,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v-_,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5980,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_A,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5981,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_B,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5983,"Replace the use of ""::value"" with ""std::is_convertible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_C,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5990,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_D,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,5990,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_E,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6003,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_F,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6003,"Replace the use of ""::value"" with ""std::is_floating_point_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_G,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6010,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_H,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6017,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_I,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6025,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_J,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6025,"Replace the use of ""::value"" with ""std::is_enum_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_K,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6028,"Replace the use of ""::type"" with ""std::underlying_type_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_L,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6029,"Replace the use of ""::value"" with ""std::is_unsigned_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_M,cpp:S7035,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6030,"Prefer ""std::to_underlying"" to ""std::underlying_type_t"" to cast enums to their underlying type.",OPEN,15min,15min,tbakker@example.com,"pitfall,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_N,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6041,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_O,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6045,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_P,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6060,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_Q,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6060,"Replace the use of ""::value"" with ""std::is_convertible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_R,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6073,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_S,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6087,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_T,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6087,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_U,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6095,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_V,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6095,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_W,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6095,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_X,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6103,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_Y,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6103,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_Z,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6122,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLj,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6173,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLk,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6215,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLl,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6230,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_a,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6250,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_b,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6255,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKj,cpp:S6186,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6273,"Keep operator== and remove operator!= for operand types ""byte_container_with_subtype"" and ""byte_container_with_subtype"".",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLm,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6321,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLn,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6323,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLo,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6325,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLp,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6327,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLq,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6342,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLr,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6344,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLs,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6460,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLt,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6487,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLu,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6489,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLv,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6516,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLw,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6518,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLx,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6520,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLy,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6522,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_c,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6624,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_e,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6634,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_d,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6635,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_f,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6663,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_g,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6677,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_h,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6680,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_i,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6720,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_j,cpp:S1871,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6760,The code of this branch is a duplicate; merge the branches or refactor so that all branches are unique.,OPEN,10min,10min,tbakker@example.com,"design,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_k,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6778,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_l,cpp:S1110,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6796,Remove these redundant parentheses.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_m,cpp:S1110,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6802,Remove these redundant parentheses.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_n,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6809,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_o,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6836,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_p,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6853,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_q,cpp:S3642,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6898,"Replace this ""enum"" with ""enum class"".",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_r,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6905,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_s,cpp:S6462,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6920,Constrain this iterator-based algorithm with the relevant iterator category.,OPEN,30min,30min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_t,cpp:S5500,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6978,"""std::move"" is never called on this rvalue reference argument.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_u,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6988,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_v,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6988,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_w,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6989,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_x,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6990,"Replace the use of ""::value"" with ""std::is_array_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_y,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6991,"Replace the use of ""::value"" with ""std::is_integral_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_z,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6991,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_0,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,6992,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_2,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7000,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_3,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7000,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_4,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7001,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_5,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7001,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_6,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7018,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_7,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7018,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_8,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7019,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_-,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7020,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v_9,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7020,"Replace the use of ""::value"" with ""std::is_integral_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4v__,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7021,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAA,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7024,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAB,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7024,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAC,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7024,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAD,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7024,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAE,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7027,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAF,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7027,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAG,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7028,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wLz,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7045,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL0,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7062,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL1,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7064,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL2,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7085,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL3,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7087,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL4,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7089,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL5,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7091,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAH,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7200,"Ensure that the move constructor of ""lexer"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAI,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7202,"Ensure that the move assignment operator of ""lexer"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAJ,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7291,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAK,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7294,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAL,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7323,Refactor this function to reduce its Cognitive Complexity from 71 to the 25 allowed.,OPEN,51min,51min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAP,cpp:S1479,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7334,Reduce the number of switch cases from 181 to at most 30.,OPEN,30min,30min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAM,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7393,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAQ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7393,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAN,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7400,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7403,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAS,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7407,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAT,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7414,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAU,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7441,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAO,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7452,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAV,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7816,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAW,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7826,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAX,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7850,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAY,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7860,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAZ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7870,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAa,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7882,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAb,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7892,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAc,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7952,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAd,cpp:S1301,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,7952,"Replace this ""switch"" statement by ""if"" statements to increase readability.",OPEN,5min,5min,tbakker@example.com,"bad-practice,based-on-misra",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAe,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8038,Refactor this function to reduce its Cognitive Complexity from 42 to the 25 allowed.,OPEN,22min,22min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAf,cpp:S999,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8151,This goto statement must be replaced by a standard iteration statement.,OPEN,1h,1h,tbakker@example.com,"based-on-misra,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAg,cpp:S999,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8215,This goto statement must be replaced by a standard iteration statement.,OPEN,1h,1h,tbakker@example.com,"based-on-misra,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAh,cpp:S999,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8306,This goto statement must be replaced by a standard iteration statement.,OPEN,1h,1h,tbakker@example.com,"based-on-misra,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAi,cpp:S6188,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8371,"Replace the two parameters ""literal_text"" and ""length"" with a more generic ""std::span"" object.",OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAj,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8377,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAk,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8424,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAl,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8465,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAm,cpp:S7040,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8531,Replace this escape sequence with \x{1F}.,OPEN,5min,5min,tbakker@example.com,"bad-practice,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAn,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8535,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL6,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8713,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL7,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8715,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAo,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8884,"Ensure that the move constructor of ""json_sax_dom_parser"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAp,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8886,"Ensure that the move assignment operator of ""json_sax_dom_parser"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAq,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8946,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAr,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,8995,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAs,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9192,"Ensure that the move constructor of ""json_sax_dom_callback_parser"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAt,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9194,"Ensure that the move assignment operator of ""json_sax_dom_callback_parser"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAu,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9263,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,tbakker@example.com,clumsy,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAv,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9263,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAw,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9361,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,tbakker@example.com,clumsy,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAx,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9361,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAy,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9538,"Use the init-statement to declare ""keep"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wAz,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9615,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA0,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9620,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA1,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9625,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA2,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9630,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA3,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9635,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA4,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9640,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA5,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9645,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA6,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9650,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA7,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9655,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA8,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9660,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA9,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9665,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA-,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9670,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wA_,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9675,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL8,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9684,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL9,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9686,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL-,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9688,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wL_,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9703,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMA,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9705,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMB,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9707,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBA,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9780,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBB,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9781,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBC,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9782,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBD,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9783,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBE,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9784,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBF,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9785,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBG,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9786,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBH,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9787,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBI,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9788,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBJ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9789,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBK,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9790,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBL,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9791,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBM,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9792,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBN,cpp:S3539,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9809,Remove this access specifier; it does not affect any declaration.,OPEN,2min,2min,tbakker@example.com,"clumsy,redundant",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBO,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9810,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBP,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9812,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBQ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9814,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBR,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9817,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBS,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9821,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBT,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9824,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBU,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9828,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBV,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9831,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBW,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9833,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBX,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9835,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBY,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9837,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBZ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9839,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBa,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9841,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBb,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9844,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMC,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9852,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMD,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9854,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wME,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9856,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBc,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9880,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBf,cpp:S1448,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9891,"Class has 43 methods, which is greater than the 35 authorized. Split it into smaller classes.",OPEN,1h,1h,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBd,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9915,"Ensure that the move constructor of ""binary_reader"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBe,cpp:S5018,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9917,"Ensure that the move assignment operator of ""binary_reader"" is exception-free and declare it ""noexcept"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,error-handling,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBg,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9938,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::input_format_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBh,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9973,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBi,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,9997,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBj,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10002,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBk,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10023,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBl,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10049,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBm,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10070,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::input_format_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBn,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10071,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBo,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10162,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBp,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10188,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBq,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10194,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBr,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10204,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBs,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10225,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBt,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10230,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBu,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10250,Refactor this function to reduce its Cognitive Complexity from 47 to the 25 allowed.,OPEN,27min,27min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBv,cpp:S1479,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10253,Reduce the number of switch cases from 199 to at most 30.,OPEN,30min,30min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBx,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10664,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBy,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10669,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wBz,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10685,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB0,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10743,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10839,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB2,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10935,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB3,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10944,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10954,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB5,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10970,Refactor this function to reduce its Cognitive Complexity from 29 to the 25 allowed.,OPEN,9min,9min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB-,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10973,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB6,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10986,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB_,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10986,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB7,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10991,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCA,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,10991,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB8,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11002,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCB,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11002,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wB9,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11007,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCC,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11007,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCD,cpp:S1479,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11028,Reduce the number of switch cases from 257 to at most 30.,OPEN,30min,30min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCE,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11409,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCF,cpp:S1479,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11414,Reduce the number of switch cases from 36 to at most 30.,OPEN,30min,30min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCG,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11603,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCH,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11610,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCI,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11625,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCJ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11634,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCK,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11639,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v6_,cpp:S1135,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11683,"Complete the task associated to this ""TODO"" comment.",OPEN,0min,0min,tbakker@example.com,cwe,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCL,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11686,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCM,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11774,Refactor this function to reduce its Cognitive Complexity from 30 to the 25 allowed.,OPEN,10min,10min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCP,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11780,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCN,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11791,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCQ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11793,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCO,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11805,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11805,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCS,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11817,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCT,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11839,Refactor this function to reduce its Cognitive Complexity from 78 to the 25 allowed.,OPEN,58min,58min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCY,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11851,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCZ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11862,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCa,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11878,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCb,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11894,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCc,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11910,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCd,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11935,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCe,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11950,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCf,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11965,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCg,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,11989,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCU,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12002,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCh,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12010,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCV,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12020,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCi,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12020,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCW,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12026,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCX,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12030,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCj,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12030,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCk,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12089,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCl,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12095,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCm,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12097,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCn,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12137,Refactor this function to reduce its Cognitive Complexity from 40 to the 25 allowed.,OPEN,20min,20min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCo,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12229,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCp,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12234,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCq,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12250,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCr,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12294,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCs,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12298,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCt,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12330,Refactor this function to reduce its Cognitive Complexity from 57 to the 25 allowed.,OPEN,37min,37min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCw,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12333,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC0,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12344,"Replace with the version of ""std::ranges::lower_bound"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCx,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12349,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCy,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12357,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCz,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12368,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12375,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC2,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12393,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCu,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12402,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC3,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12404,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12415,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wCv,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12415,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC5,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12424,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC6,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12431,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC7,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12445,Refactor this function to reduce its Cognitive Complexity from 45 to the 25 allowed.,OPEN,25min,25min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDA,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12448,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDB,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12464,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC8,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12473,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDC,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12473,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC9,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12477,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDD,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12477,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC-,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12488,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDE,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12488,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wC_,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12492,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDF,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12492,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDG,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12502,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDH,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12509,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDI,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12513,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDJ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12534,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDL,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12544,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDK,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12560,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDM,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12626,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDN,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12667,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDO,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12667,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDP,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12697,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDQ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12731,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12764,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDS,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12782,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDT,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12796,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDU,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12813,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::input_format_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMF,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12905,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMG,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12907,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMH,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12909,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMI,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12927,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMJ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12929,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMK,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12931,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wML,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12933,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMM,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12935,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMN,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12937,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMO,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12939,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMP,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,12941,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDV,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13099,Refactor this function to reduce its Cognitive Complexity from 123 to the 25 allowed.,OPEN,1h43min,1h43min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDW,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13116,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDs,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13116,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDX,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13122,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDw,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13124,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDY,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13132,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDt,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13132,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDZ,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13138,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDu,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13138,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDa,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13144,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDv,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13144,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDb,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13161,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDx,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13161,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDc,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13167,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDy,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13169,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDd,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13187,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDz,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13187,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD0,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13194,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDe,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13194,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13204,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDf,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13204,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD2,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13213,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDg,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13213,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD3,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13222,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDh,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13222,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13231,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDi,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13231,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD5,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13240,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDj,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13240,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD6,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13249,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDk,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13249,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD7,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13265,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDl,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13265,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDm,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13313,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD8,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13320,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD9,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13322,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDn,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13322,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD-,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13354,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDo,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13354,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wD_,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13361,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDp,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13361,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDq,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13367,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEA,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13367,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wDr,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13381,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEB,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13383,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMQ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13455,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMR,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13466,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMS,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13468,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMT,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13482,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEC,cpp:S6230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13539,"Use ""=default"" instead of the default implementation of this comparison function.",OPEN,5min,5min,tbakker@example.com,"pitfall,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKk,cpp:S6187,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13544,"Define operator<=> and remove operators <, <=, >, >= for operand types ""primitive_iterator_t"" and ""primitive_iterator_t"".",OPEN,5min,5min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wED,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13549,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEE,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13549,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMU,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13627,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMV,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13641,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMW,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13643,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMX,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13645,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMY,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13647,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMZ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13649,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMa,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13651,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMb,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13653,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEF,cpp:S3231,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13661,Remove this redundant forward declaration; the declaration was already made.,OPEN,2min,2min,tbakker@example.com,"redundant,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEG,cpp:S3231,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13662,Remove this redundant forward declaration; the declaration was already made.,OPEN,2min,2min,tbakker@example.com,"redundant,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEH,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13684,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEI,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13684,"Replace the use of ""::value"" with ""std::is_const_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEJ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13684,"Replace the use of ""::type"" with ""std::remove_const_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEK,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13694,"Replace the use of ""::type"" with ""std::remove_const_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEL,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13698,"Replace the use of ""::value"" with ""std::is_base_of_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEM,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13714,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEN,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13714,"Replace the use of ""::value"" with ""std::is_const_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEO,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13719,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEP,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13719,"Replace the use of ""::value"" with ""std::is_const_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEQ,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13784,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wER,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13809,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wES,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13809,"Replace the use of ""::type"" with ""std::remove_const_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wET,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13819,"Replace the use of ""::type"" with ""std::remove_const_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEU,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13836,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEV,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13880,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEW,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13919,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEX,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13944,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEY,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13963,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEZ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,13986,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEa,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14016,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEb,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14067,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEc,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14102,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEd,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14102,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEe,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14102,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEg,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14106,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEf,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14118,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEh,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14142,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEi,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14142,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEj,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14142,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEl,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14155,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEk,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14168,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEm,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14224,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEn,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14265,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEo,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14287,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEq,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14298,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEp,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14303,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEr,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14332,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEs,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14351,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEt,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14369,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEu,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14390,"Replace the use of ""::type"" with ""std::remove_const_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMc,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14396,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMd,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14398,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMe,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14413,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEv,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14490,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEw,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14496,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEx,cpp:S2807,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14502,Make this member overloaded operator a hidden friend.,OPEN,15min,15min,tbakker@example.com,"api-design,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEy,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14516,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wEz,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14523,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMf,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14531,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMg,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14533,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMh,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14546,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE0,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14566,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE1,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14567,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMi,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14575,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMj,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14599,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMk,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14601,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMl,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14603,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMm,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14605,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMn,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14607,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE2,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14661,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE3,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14661,"Replace this conversion operator with a function or (C++11) add the ""explicit"" keyword.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14741,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE5,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14753,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE6,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14799,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE7,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14805,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE8,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14834,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE9,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14863,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE-,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,14943,"Replace with the version of ""std::ranges::all_of"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wE_,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15007,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFA,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15017,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFB,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15065,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFC,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15075,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFD,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15114,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFE,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15124,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFF,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15158,Refactor this function to reduce its Cognitive Complexity from 35 to the 25 allowed.,OPEN,15min,15min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFI,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15178,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFJ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15183,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFK,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15188,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFG,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15190,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFL,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15190,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFH,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15195,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFM,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15197,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFN,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15257,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFO,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15290,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFP,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15320,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFQ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15389,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15399,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFS,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15442,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMo,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15449,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMp,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15451,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMq,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15570,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMr,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15584,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMs,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15586,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFT,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15599,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFU,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15603,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8b,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15613,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFV,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15613,"Replace the use of ""::value"" with ""std::is_constructible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8c,cpp:S6458,MAJOR,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15614,Ensure this forwarding constructor has constraints that prevent copying / moving objects of the same type.,OPEN,20min,20min,tbakker@example.com,"since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFW,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15614,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMt,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15652,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMu,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15654,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMv,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15656,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMw,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15658,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMx,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15660,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMy,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15662,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wMz,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15664,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM0,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15686,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM1,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15688,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM2,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15690,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM3,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15713,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFX,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15817,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFY,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15821,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFZ,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15825,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFa,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15828,"Replace this conversion operator with a function or (C++11) add the ""explicit"" keyword.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM4,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15840,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFb,cpp:S1448,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15862,"Class has 42 methods, which is greater than the 35 authorized. Split it into smaller classes.",OPEN,1h,1h,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFd,cpp:S1301,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15885,"Replace this ""switch"" statement by ""if"" statements to increase readability.",OPEN,5min,5min,tbakker@example.com,"bad-practice,based-on-misra",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFc,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15886,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFh,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,15912,Refactor this function to reduce its Cognitive Complexity from 72 to the 25 allowed.,OPEN,52min,52min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFe,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16051,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFi,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16080,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFf,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16089,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFj,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16181,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFg,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16191,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFn,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16236,Refactor this function to reduce its Cognitive Complexity from 73 to the 25 allowed.,OPEN,53min,53min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFk,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16374,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFp,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16400,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFl,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16409,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFo,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16449,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFq,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16512,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFm,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16522,"Use the init-statement to declare ""N"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFr,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16563,Refactor this function to reduce its Cognitive Complexity from 74 to the 25 allowed.,OPEN,54min,54min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFt,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16617,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFu,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16642,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFv,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16692,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFw,cpp:S1066,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16716,"Merge this ""if"" statement with the enclosing one.",OPEN,5min,5min,tbakker@example.com,clumsy,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFx,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16732,"Replace with the version of ""std::ranges::all_of"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFy,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16740,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFz,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16758,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF0,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16789,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF1,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16795,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF2,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16806,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF3,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16835,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF4,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16846,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF5,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16848,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF6,cpp:S1905,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16884,Remove this redundant cast.,OPEN,5min,5min,tbakker@example.com,"clumsy,redundant",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF7,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16936,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF8,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16940,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF9,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16943,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF-,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16951,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wF_,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16963,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGA,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16967,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGB,cpp:S3630,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16984,"Replace ""reinterpret_cast"" with a safer operation.",OPEN,20min,20min,tbakker@example.com,"cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGC,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,16996,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGD,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17007,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGE,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17010,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGF,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17022,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGG,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17028,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGH,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17043,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGI,cpp:S818,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17094,Uppercase the literal suffix.,OPEN,2min,2min,tbakker@example.com,"based-on-misra,cert,convention,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGJ,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17146,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGK,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17146,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGL,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17147,"Replace the use of ""::value"" with ""std::is_floating_point_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wFs,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17148,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGM,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17160,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGN,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17160,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGO,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17161,"Replace the use of ""::value"" with ""std::is_unsigned_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGP,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17162,Refactor this function to reduce its Cognitive Complexity from 32 to the 25 allowed.,OPEN,12min,12min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGQ,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17247,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGR,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17247,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGS,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17248,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGT,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17249,"Replace the use of ""::value"" with ""std::is_floating_point_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGU,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17250,Refactor this function to reduce its Cognitive Complexity from 33 to the 25 allowed.,OPEN,13min,13min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGV,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17331,Refactor this function to reduce its Cognitive Complexity from 43 to the 25 allowed.,OPEN,23min,23min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGW,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17445,Refactor this function to reduce its Cognitive Complexity from 35 to the 25 allowed.,OPEN,15min,15min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGX,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17583,"Replace with the version of ""std::ranges::reverse"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGY,cpp:S1110,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17595,Remove these redundant parentheses.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGZ,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17622,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGa,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17622,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGb,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17622,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGc,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17629,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGd,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17629,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGe,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17629,"Replace the use of ""::value"" with ""std::is_unsigned_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGf,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17643,"Replace the use of ""::value"" with ""std::is_trivial_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGg,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17653,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGh,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17653,"Replace the use of ""::value"" with ""std::is_unsigned_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGi,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17660,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGj,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17661,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGk,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17662,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGl,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17663,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGm,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17663,"Replace the use of ""::type"" with ""std::remove_cv_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM5,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17681,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM6,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17708,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM7,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17727,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM8,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17795,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGo,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17918,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGn,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,17951,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM9,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18341,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM-,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18362,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wM_,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18367,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNA,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18373,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNB,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18379,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGp,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18393,"Use the init-statement to declare ""rest"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNC,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18415,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wND,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18464,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNE,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18473,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNF,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18480,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGq,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18653,"Use the init-statement to declare ""k"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNG,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18704,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNH,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18716,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNI,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18829,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNJ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18831,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNK,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18833,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNL,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18835,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNM,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18837,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNN,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18839,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNO,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18841,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGr,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18917,Refactor this function to reduce its Cognitive Complexity from 68 to the 25 allowed.,OPEN,48min,48min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGu,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,18939,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGv,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19012,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGw,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19073,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGs,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19084,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGt,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19115,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGx,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19201,Refactor this function to reduce its Cognitive Complexity from 57 to the 25 allowed.,OPEN,37min,37min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG2,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19223,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG3,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19224,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG4,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19230,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG5,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19231,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG6,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19237,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG7,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19238,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG8,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19244,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG9,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19245,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG-,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19251,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG_,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19252,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHA,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19258,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHB,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19259,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHC,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19265,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHD,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19266,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGy,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19274,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHE,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19279,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHF,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19286,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHG,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19296,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHH,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19323,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wGz,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19333,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG0,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19342,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHI,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19347,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHJ,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19348,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHK,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19349,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHL,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19350,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHM,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19351,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHN,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19352,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHO,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19356,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHP,cpp:S7040,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19356,Replace this escape sequence with \x{EF}.,OPEN,5min,5min,tbakker@example.com,"bad-practice,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHQ,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19357,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHR,cpp:S7040,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19357,Replace this escape sequence with \x{BF}.,OPEN,5min,5min,tbakker@example.com,"bad-practice,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHS,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19358,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHT,cpp:S7040,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19358,Replace this escape sequence with \x{BD}.,OPEN,5min,5min,tbakker@example.com,"bad-practice,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHU,cpp:S1121,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19391,Extract the assignment from this expression.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wG1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19400,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHV,cpp:S7040,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19436,Use bounded syntax to provide numerical escape sequences,OPEN,5min,5min,tbakker@example.com,"bad-practice,since-c++23",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHW,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19497,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHX,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19497,"Replace the use of ""::value"" with ""std::is_signed_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHf,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19498,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHY,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19503,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHZ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19503,"Replace the use of ""::value"" with ""std::is_unsigned_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHa,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19518,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHb,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19519,"Replace the use of ""::value"" with ""std::is_integral_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHc,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19520,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHd,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19521,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHe,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19522,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHg,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19645,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHh,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19666,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHi,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19736,"Use ""std::byte"" for byte-oriented data manipulation.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHj,cpp:S1110,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19737,Remove these redundant parentheses.,OPEN,1min,1min,tbakker@example.com,confusing,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNP,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19800,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNQ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19802,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNR,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19804,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNS,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19824,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNT,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19826,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHk,cpp:S5500,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19860,"""std::move"" is never called on this rvalue reference argument.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHl,cpp:S5417,BLOCKER,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19869,"""std::forward"" should only be called on a forwarding reference.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHm,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19873,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHn,cpp:S5500,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19875,"""std::move"" is never called on this rvalue reference argument.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHo,cpp:S5417,BLOCKER,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19884,"""std::forward"" should only be called on a forwarding reference.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHp,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19893,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHq,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19905,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHr,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19925,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHs,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19953,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHt,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19970,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHu,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19975,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHv,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19987,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHw,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19991,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHx,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,19996,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHy,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20078,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wHz,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20104,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH0,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20149,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH1,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20149,"Replace the use of ""::value"" with ""std::is_convertible_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH2,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20152,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7n,cpp:S1448,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20201,"Class has 229 methods, which is greater than the 35 authorized. Split it into smaller classes.",OPEN,1h,1h,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH4,cpp:S3608,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20490,Explicitly capture the required scope variables.,OPEN,5min,5min,tbakker@example.com,"since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7o,cpp:S5950,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20494,"Use ""std::make_unique"" to construct ""std::unique_ptr"".",OPEN,2min,2min,tbakker@example.com,"cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH5,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20552,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH6,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20554,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH7,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20556,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH8,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20558,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH9,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20560,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH-,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20622,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wH_,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20632,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIA,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20635,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIB,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20638,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIC,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20641,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wID,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20644,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIE,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20647,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIF,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20650,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIG,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20653,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIH,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20656,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wII,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20659,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIJ,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20682,"Replace with the version of ""std::ranges::move"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIK,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20703,"Replace with the version of ""std::ranges::move"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7p,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20709,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIL,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20922,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIM,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20930,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7q,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20940,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7r,cpp:S6458,MAJOR,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20942,Ensure this forwarding constructor has constraints that prevent copying / moving objects of the same type.,OPEN,20min,20min,tbakker@example.com,"since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIN,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20942,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7s,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20954,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIO,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20955,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIP,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,20956,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIQ,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21020,"Replace with the version of ""std::ranges::all_of"" that takes a range.",OPEN,2min,2min,tbakker@example.com,"bad-practice,clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21039,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7t,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21141,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIS,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21141,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIT,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21142,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIU,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21143,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIV,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21150,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIW,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21167,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7u,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21251,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIX,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21253,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIY,cpp:S5417,BLOCKER,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21331,"""std::forward"" should only be called on a forwarding reference.",OPEN,10min,10min,tbakker@example.com,"cppcoreguidelines,since-c++11,suspicious",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7A,cpp:S1135,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21332,"Complete the task associated to this ""TODO"" comment.",OPEN,0min,0min,tbakker@example.com,cwe,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIZ,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21523,"Replace this conversion operator with a function or (C++11) add the ""explicit"" keyword.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIa,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21538,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIc,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21657,"Replace the use of ""::type"" with ""std::add_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIb,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21659,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7v,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21674,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wId,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21674,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIe,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21675,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIl,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21676,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7w,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21684,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIf,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21684,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIg,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21685,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIh,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21686,"Replace the use of ""::value"" with ""std::is_const_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIi,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21686,"Replace the use of ""::type"" with ""std::remove_pointer_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7x,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21733,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7y,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21776,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7z,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21801,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v70,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21824,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIj,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21825,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v71,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21837,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIk,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21838,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIx,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21875,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIm,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21882,"Replace the use of ""::value"" with ""std::is_reference_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v72,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21914,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIn,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21914,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIo,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21915,"Replace the use of ""::value"" with ""std::is_pointer_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v73,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21925,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v74,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21939,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v75,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21951,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v76,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21963,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIp,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21963,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIq,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21964,"Replace the use of ""::value"" with ""std::is_reference_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJr,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21965,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v77,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21973,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIr,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21973,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIs,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21974,"Replace the use of ""::value"" with ""std::is_reference_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIt,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21975,"Replace the use of ""::value"" with ""std::is_const_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIu,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,21975,"Replace the use of ""::type"" with ""std::remove_reference_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v78,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22011,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIv,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22011,"Replace the use of ""::type"" with ""std::enable_if_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIw,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22027,"Replace this conversion operator with a function or (C++11) add the ""explicit"" keyword.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIy,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22072,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wIz,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22095,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI0,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22118,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v79,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22133,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22138,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI2,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22156,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7-,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22171,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI3,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22176,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22202,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI5,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22240,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI6,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22261,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI7,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22275,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7_,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22301,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI8,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22314,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8A,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22325,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI9,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22330,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI-,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22348,"Replace the use of ""::type"" with ""std::decay_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8B,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22353,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wI_,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22356,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJB,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22360,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJA,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22364,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJC,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22377,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8C,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22378,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJD,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22381,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJF,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22385,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJE,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22389,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8D,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22402,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJG,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22407,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJI,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22411,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22415,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJJ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22428,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8E,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22429,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJK,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22434,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJM,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22438,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22442,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8F,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22455,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJN,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22457,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJO,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22461,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJP,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22480,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8G,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22481,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJQ,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22483,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJR,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22487,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8H,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22504,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJS,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22507,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJT,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22509,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJU,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22514,"Replace the use of ""::type"" with ""std::conditional_t"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8I,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22515,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJV,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22518,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJW,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22520,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8J,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22559,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJX,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22560,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJY,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22561,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJZ,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22565,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJa,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22581,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8K,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22629,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJb,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22630,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJc,cpp:S6020,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22631,"Replace the use of ""::value"" with ""std::is_same_v"".",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJd,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22635,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJe,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22651,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8L,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22701,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJi,cpp:S6017,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22703,"Combine this function with its overloads by using ""if constexpr"".",OPEN,2min,2min,tbakker@example.com,since-c++17,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJf,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22706,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8M,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22714,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJh,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22719,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJg,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22725,"Use the init-statement to declare ""it"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8N,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22746,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJj,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22758,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJk,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22760,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8O,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22812,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8P,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22828,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8Q,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22852,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8R,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22869,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8S,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22883,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJl,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22885,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJm,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,22998,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJn,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23009,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJo,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23224,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJp,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23257,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJq,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23289,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJs,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23345,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJt,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23370,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJu,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23421,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJv,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23424,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJw,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23448,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJx,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23451,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJy,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23468,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJz,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23474,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ0,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23480,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ1,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23485,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ2,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23499,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ3,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23505,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ4,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23519,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ5,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23525,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ6,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23531,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ7,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23559,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ8,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23565,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ9,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23571,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ-,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23628,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wJ_,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23644,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKA,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23660,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKB,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23676,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKC,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23692,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKl,cpp:S6186,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23816,"Keep operator== and remove operator!= for operand types ""basic_json"" and ""basic_json"".",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNU,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23851,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNV,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23856,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNW,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23859,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNX,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23866,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNY,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,23868,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKD,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24131,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKE,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24178,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKF,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24211,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKG,cpp:S5500,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24211,"""std::move"" is never called on this rvalue reference argument.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKH,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24258,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKI,cpp:S5500,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24258,"""std::move"" is never called on this rvalue reference argument.",OPEN,10min,10min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKJ,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24279,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKK,cpp:S1709,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24341,"Add the ""explicit"" keyword to this constructor.",OPEN,2min,2min,tbakker@example.com,"based-on-misra,cppcoreguidelines",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8T,cpp:S1048,CRITICAL,BUG,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24360,Do not throw uncaught exceptions in a destructor.,OPEN,30min,30min,tbakker@example.com,misra-c++2008,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKL,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24557,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKM,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24567,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKN,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24613,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKO,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24622,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKP,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24667,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKQ,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24676,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKR,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24751,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKS,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24760,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8U,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24787,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKT,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24789,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8V,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24801,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKU,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24803,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8W,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24815,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKV,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24817,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v8X,cpp:S6195,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24829,"Replace this use of ""enable_if"" with a language construct (i.e. use an abbreviate function template, a ""requires"" clause, or an ""if constexpr"").",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKW,cpp:S1133,INFO,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24831,Do not forget to remove this deprecated code someday.,OPEN,10min,10min,tbakker@example.com,obsolete,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKX,cpp:S3776,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24863,Refactor this function to reduce its Cognitive Complexity from 52 to the 25 allowed.,OPEN,32min,32min,tbakker@example.com,"architecture,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKZ,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24869,"This lambda has 28 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKa,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24900,"This lambda has 51 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKb,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24923,"Reduce verbosity with ""using enum"" for ""nlohmann::detail::value_t"".",OPEN,2min,2min,tbakker@example.com,since-c++20,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKc,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24942,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKd,cpp:S1188,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24968,"This lambda has 22 lines, which is greater than the 20 lines authorized. Split it into several lambdas or functions, or make it a named function.",OPEN,20min,20min,tbakker@example.com,since-c++11,2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKe,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24980,"Use ""[[likely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKY,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,24997,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKg,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25017,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKh,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25024,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKf,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25035,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7O6D22xePu4wKi,cpp:S6180,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25113,"Use ""[[unlikely]]"" attribute instead of the non-standard macro.",OPEN,1min,1min,tbakker@example.com,"bad-practice,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNZ,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25386,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNa,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25420,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7B,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25458,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7P6D22xePu4wNb,cpp:S125,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25467,Remove the commented out code.,OPEN,5min,5min,tbakker@example.com,"based-on-misra,unused",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7C,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25479,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7D,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25487,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7E,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25491,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7F,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25501,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7G,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25514,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7H,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25517,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7I,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25530,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7J,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25549,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7K,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25551,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7L,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25555,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7M,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25557,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7N,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25560,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7O,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25563,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7P,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25566,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7Q,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25574,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7R,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25576,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7S,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25594,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7T,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25596,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7U,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25598,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7V,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25600,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7W,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25602,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7X,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25604,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7Y,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25606,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7Z,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25608,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d7N6D22xePu4v7a,cpp:S959,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/nlohmann_json.hpp,Heimdall-SBOM_heimdall,tests/nlohmann_json.hpp,25610,Remove this #undef directive that undefines a non-existing macro.,OPEN,2h,2h,tbakker@example.com,"based-on-misra,brain-overload",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4a,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,42,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4b,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,43,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4c,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,45,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4d,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,46,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4e,cpp:S5416,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,47,"""using"" should be preferred to ""typedef"" for type aliasing.",OPEN,5min,5min,tbakker@example.com,"cppcoreguidelines,design,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4f,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,51,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4h,cpp:S6010,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,106,"Change type of ""fullPath"" to ""std::filesystem::path"".",OPEN,15min,15min,tbakker@example.com,"clumsy,performance,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4i,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,194,"Use the init-statement to declare ""result"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4j,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,202,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4k,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,203,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4l,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,204,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4m,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,205,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4n,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,206,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4o,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,270,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4p,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,271,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4r,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,275,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4s,cpp:S5827,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,277,"Replace the redundant type with ""auto"".",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines,since-c++11",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4y,cpp:S6010,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,479,"Change type of ""outputPath"" to ""std::filesystem::path"".",OPEN,15min,15min,tbakker@example.com,"clumsy,performance,since-c++17",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v41,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,578,"Use the transparent comparator ""std::less<>"" with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v4_,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,620,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d446D22xePu4v5B,cpp:S6171,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_sbom_consistency.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_sbom_consistency.cpp,624,"Use ""contains"" member function.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++20",2025-07-06T00:08:20+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSK,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,70,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:52:41+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d8f6D22xePu4wPM,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,341,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T22:24:08+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPR,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,380,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T22:24:08+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPT,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,396,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T22:24:08+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPc,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,493,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T22:24:08+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPd,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,561,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T22:24:08+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSH,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,64,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSI,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,65,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSJ,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,66,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSL,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,139,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSM,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,169,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSN,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,201,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSO,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,235,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSP,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,241,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,CLOSED,10min,10min,tbakker@example.com,brain-overload,2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSQ,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,270,"Use the init-statement to declare ""context"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSU,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,361,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSG,cpp:S1763,MAJOR,BUG,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,388,'return' will never be executed,OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,cwe,unused",2025-07-05T22:05:27+0000,2025-07-06T13:14:37+0000,
AZff4d8S6D22xePu4wO-,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,48,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d8S6D22xePu4wO_,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,49,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d8S6D22xePu4wPA,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,50,Global variables should be const.,CLOSED,20min,20min,tbakker@example.com,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T22:05:27+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wST,cpp:S1141,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,343,Extract this nested try block into a separate method.,OPEN,20min,20min,tbakker@example.com,"confusing,error-handling",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSW,cpp:S1186,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,346,"Add a nested comment explaining why this method is empty, or complete the implementation.",CLOSED,5min,5min,tbakker@example.com,suspicious,2025-07-05T21:07:56+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSX,cpp:S1186,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,347,"Add a nested comment explaining why this method is empty, or complete the implementation.",CLOSED,5min,5min,tbakker@example.com,suspicious,2025-07-05T21:07:56+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-E6D22xePu4wSV,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,367,"""catch"" a specific exception type.",OPEN,20min,20min,tbakker@example.com,error-handling,2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQ1,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1857,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQ3,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1857,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1858,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ5,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1891,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQ8,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1891,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ9,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1892,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ7,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1893,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ-,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1926,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRA,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1926,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRB,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1927,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d716D22xePu4wN4,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_metadata_extractor_extended.cpp,Heimdall-SBOM_heimdall,tests/test_metadata_extractor_extended.cpp,26,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d716D22xePu4wN6,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_metadata_extractor_extended.cpp,Heimdall-SBOM_heimdall,tests/test_metadata_extractor_extended.cpp,130,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOo,cpp:S5812,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,32,Concatenate this namespace with the nested one.,OPEN,5min,5min,tbakker@example.com,"confusing,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOn,cpp:S1117,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,105,declaration shadows a field of 'heimdall::PluginInterface',OPEN,5min,5min,tbakker@example.com,"based-on-misra,cert,pitfall,suspicious",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOp,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,146,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOq,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,160,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOr,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,182,"This function should be declared ""const"".",OPEN,5min,5min,tbakker@example.com,"confusing,pitfall",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOt,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,558,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOu,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,561,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOv,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,653,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8J6D22xePu4wOw,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_plugin_interface.cpp,Heimdall-SBOM_heimdall,tests/test_plugin_interface.cpp,662,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d3W6D22xePu4v4U,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils_extended.cpp,Heimdall-SBOM_heimdall,tests/test_utils_extended.cpp,25,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d3W6D22xePu4v4W,cpp:S6022,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils_extended.cpp,Heimdall-SBOM_heimdall,tests/test_utils_extended.cpp,39,"Use ""std::byte"" for byte-oriented memory access.",OPEN,5min,5min,tbakker@example.com,"clumsy,pitfall,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d3W6D22xePu4v4X,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils_extended.cpp,Heimdall-SBOM_heimdall,tests/test_utils_extended.cpp,202,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d3W6D22xePu4v4Z,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils_extended.cpp,Heimdall-SBOM_heimdall,tests/test_utils_extended.cpp,213,"Use the init-statement to declare ""libc_path"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T21:07:56+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,297,"Use the init-statement to declare ""members"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPI,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,301,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQQ,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1376,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQZ,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1394,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQT,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1402,"Use the init-statement to declare ""nullPos"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQS,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1423,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQP,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1435,"Use the init-statement to declare ""nullPos"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQi,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1457,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQY,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1461,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQc,cpp:S886,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1558,Refactor this loop so that it is less error-prone.,OPEN,10min,10min,tbakker@example.com,based-on-misra,2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQX,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1587,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQW,cpp:S924,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1598,"Reduce the number of nested ""break"" statements from 5 to 1 authorized.",OPEN,20min,20min,tbakker@example.com,"based-on-misra,confusing",2025-07-05T15:31:55+0000,2025-07-06T14:56:40+0000,
AZff4d9p6D22xePu4wQR,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1599,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQa,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1627,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQj,cpp:S6185,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1642,Use std::format instead of concatenating pieces manually.,OPEN,3min,3min,tbakker@example.com,"clumsy,since-c++20",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQz,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1834,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ0,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1835,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQy,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1836,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wQ2,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1871,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQ6,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1906,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wQ_,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1940,"Use the init-statement to declare ""match"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRC,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1959,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRE,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1959,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRF,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1960,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRG,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1975,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRD,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1981,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRH,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1997,"Use the init-statement to declare ""dirName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRK,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1997,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRL,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,1998,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRJ,cpp:S134,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2008,Refactor this code to not nest more than 3 if|for|do|while|switch statements.,OPEN,10min,10min,tbakker@example.com,brain-overload,2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRM,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2019,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRI,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2024,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9p6D22xePu4wRO,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2041,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRP,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2042,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRQ,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2057,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d9p6D22xePu4wRN,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,2062,"Use the init-statement to declare ""packageName"" inside the if statement.",OPEN,2min,2min,tbakker@example.com,"clumsy,since-c++17",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9_6D22xePu4wSF,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.hpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.hpp,41,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRc,cpp:S6045,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,41,"Use the transparent equality ""std::equal_to<>"" and a custom transparent heterogeneous hasher with this associative string container.",OPEN,2min,2min,tbakker@example.com,"performance,since-c++14",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSj,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,161,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,tbakker@example.com,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T15:31:55+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wS_,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,676,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:31:55+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d-E6D22xePu4wSR,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,375,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSS,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,381,"""catch"" a specific exception type.",OPEN,20min,20min,tbakker@example.com,error-handling,2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSY,cpp:S1181,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,424,Catch a more specific exception instead of a generic one.,OPEN,20min,20min,tbakker@example.com,"bad-practice,cert,cppcoreguidelines,cwe,error-handling",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d-E6D22xePu4wSZ,cpp:S2738,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.cpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.cpp,429,"""catch"" a specific exception type.",OPEN,20min,20min,tbakker@example.com,error-handling,2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8S6D22xePu4wPB,cpp:S3539,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/DWARFExtractor.hpp,Heimdall-SBOM_heimdall,src/common/DWARFExtractor.hpp,148,Remove this redundant access specifier; it does not change the accessibility level.,OPEN,2min,2min,tbakker@example.com,"clumsy,redundant",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8D6D22xePu4wOi,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_linux_support.cpp,Heimdall-SBOM_heimdall,tests/test_linux_support.cpp,26,"Member variables should not be ""protected"".",OPEN,20min,20min,tbakker@example.com,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8D6D22xePu4wOl,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_linux_support.cpp,Heimdall-SBOM_heimdall,tests/test_linux_support.cpp,122,Value stored to 'found_data' is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8D6D22xePu4wOh,cpp:S1481,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_linux_support.cpp,Heimdall-SBOM_heimdall,tests/test_linux_support.cpp,139,unused variable 'result',OPEN,5min,5min,tbakker@example.com,unused,2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8D6D22xePu4wOm,cpp:S1854,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_linux_support.cpp,Heimdall-SBOM_heimdall,tests/test_linux_support.cpp,139,Value stored to 'result' during its initialization is never read,OPEN,1min,1min,tbakker@example.com,"cert,cwe,symbolic-execution,unused",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d8D6D22xePu4wOk,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_linux_support.cpp,Heimdall-SBOM_heimdall,tests/test_linux_support.cpp,194,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d7w6D22xePu4wN1,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_package_manager_and_archive.cpp,Heimdall-SBOM_heimdall,tests/test_package_manager_and_archive.cpp,130,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d7w6D22xePu4wN2,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_package_manager_and_archive.cpp,Heimdall-SBOM_heimdall,tests/test_package_manager_and_archive.cpp,152,"Use ""contains"" instead of ""find"".",OPEN,10min,10min,tbakker@example.com,"clumsy,since-c++23",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d7w6D22xePu4wN3,cpp:S1155,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_package_manager_and_archive.cpp,Heimdall-SBOM_heimdall,tests/test_package_manager_and_archive.cpp,160,"Use ""empty()"" to check whether the container is empty or not.",OPEN,2min,2min,tbakker@example.com,"clumsy,cppcoreguidelines",2025-07-05T15:24:58+0000,2025-07-06T13:14:37+0000,
AZff4d966D22xePu4wR7,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,67,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d966D22xePu4wR8,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,67,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d966D22xePu4wSA,cpp:S6009,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/ComponentInfo.cpp,Heimdall-SBOM_heimdall,src/common/ComponentInfo.cpp,161,"Replace this const reference to ""std::string"" by a ""std::string_view"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++17,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPE,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,104,"Do not use the constructor's initializer list for data member ""pImpl"". Use the in-class initializer instead.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8f6D22xePu4wPK,cpp:S5817,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/MetadataExtractor.cpp,Heimdall-SBOM_heimdall,src/common/MetadataExtractor.cpp,352,"This function should be declared ""const"".",CLOSED,5min,5min,trevor.bakker@uta.edu,"confusing,pitfall",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d8O6D22xePu4wO0,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,38,"Do not use the constructor's initializer list for data member ""sbomGenerator"". Use the in-class initializer instead.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8O6D22xePu4wOx,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,39,"Remove this use of the constructor's initializer list for data member ""verbose"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8O6D22xePu4wOy,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,40,"Remove this use of the constructor's initializer list for data member ""extractDebugInfo"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8O6D22xePu4wOz,cpp:S3230,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,41,"Remove this use of the constructor's initializer list for data member ""includeSystemLibraries"". It is redundant with the in-class initializer.",OPEN,10min,10min,trevor.bakker@uta.edu,"cppcoreguidelines,performance",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8O6D22xePu4wO4,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,290,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d8O6D22xePu4wO5,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,291,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d8O6D22xePu4wO8,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,373,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d8O6D22xePu4wO9,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/PluginInterface.cpp,Heimdall-SBOM_heimdall,src/common/PluginInterface.cpp,375,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRj,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,307,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,convention",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRk,cpp:S1659,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,308,Define each identifier in a dedicated statement.,OPEN,5min,5min,trevor.bakker@uta.edu,"based-on-misra,cert,convention",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRo,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,463,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRr,cpp:S3628,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,554,Convert this string literal to a raw string literal.,OPEN,2min,2min,trevor.bakker@uta.edu,since-c++11,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRZ,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,650,"'gmtime' is deprecated: This function or variable may be unsafe. Consider using gmtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@uta.edu,"cert,cwe,obsolete",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRt,cpp:S1912,BLOCKER,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,650,"Replace this call to the non reentrant function ""gmtime"" by a call to ""gmtime_r"".",OPEN,30min,30min,trevor.bakker@uta.edu,multi-threading,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d9x6D22xePu4wRu,cpp:S6229,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/SBOMGenerator.cpp,Heimdall-SBOM_heimdall,src/common/SBOMGenerator.cpp,650,"Replace this use of ""gmtime"" with equivalent code using ""std::chrono"".",OPEN,10min,10min,trevor.bakker@uta.edu,"confusing,since-c++20",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSd,cpp:S3806,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,35,non-portable path to file '<Windows.h>'; specified path differs in case from file name on disk,OPEN,5min,5min,trevor.bakker@uta.edu,pitfall,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSi,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,147,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSk,cpp:S6495,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,171,"""std::print"" or ""std::format"" should be used instead of standard output manipulators",OPEN,5min,5min,trevor.bakker@uta.edu,"clumsy,performance,since-c++20",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSt,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,300,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSe,cpp:S1874,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,313,"'getenv' is deprecated: This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.",OPEN,15min,15min,trevor.bakker@uta.edu,"cert,cwe,obsolete",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSv,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,326,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSw,cpp:S6003,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,327,"Replace this use of ""push_back"" with ""emplace_back"".",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,performance,since-c++11",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSx,cpp:S6004,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,403,"Use the init-statement to declare ""normalizedPath"" inside the if statement.",OPEN,2min,2min,trevor.bakker@uta.edu,"clumsy,since-c++17",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wSy,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,403,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d-Q6D22xePu4wS9,cpp:S5945,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,525,"Use ""std::string"" instead of a C-style char array.",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,clumsy,cppcoreguidelines",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wS8,cpp:S6494,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,526,"Use ""std::format"" or ""std::format_to_n"" instead of ""snprintf"".",OPEN,10min,10min,trevor.bakker@uta.edu,"bad-practice,since-c++20",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Q6D22xePu4wTA,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,608,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d-Q6D22xePu4wTB,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,609,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d-Q6D22xePu4wTC,cpp:S7034,MAJOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/common/Utils.cpp,Heimdall-SBOM_heimdall,src/common/Utils.cpp,615,"Use ""contains"" instead of ""find"".",CLOSED,10min,10min,trevor.bakker@uta.edu,"clumsy,since-c++23",2025-07-05T00:03:59+0000,2025-07-07T00:16:23,2025-07-07T00:16:23
AZff4d-d6D22xePu4wTx,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldAdapter.cpp,Heimdall-SBOM_heimdall,src/gold/GoldAdapter.cpp,50,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-h6D22xePu4wT2,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/gold/GoldPlugin.cpp,Heimdall-SBOM_heimdall,src/gold/GoldPlugin.cpp,28,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-U6D22xePu4wTT,cpp:S6197,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDAdapter.cpp,Heimdall-SBOM_heimdall,src/lld/LLDAdapter.cpp,89,"Replace with the version of ""std::ranges::find"" that takes a range.",OPEN,2min,2min,trevor.bakker@uta.edu,"bad-practice,clumsy,since-c++20",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d-Z6D22xePu4wTW,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,40,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-Z6D22xePu4wTa,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,41,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-Z6D22xePu4wTc,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,42,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-Z6D22xePu4wTe,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,44,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-Z6D22xePu4wTg,cpp:S5421,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,46,Global variables should be const.,CLOSED,20min,20min,trevor.bakker@uta.edu,"bad-practice,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T23:50:11+0000,2025-07-06T23:50:11+0000
AZff4d-Z6D22xePu4wTt,cpp:S3471,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:src/lld/LLDPlugin.cpp,Heimdall-SBOM_heimdall,src/lld/LLDPlugin.cpp,96,"Drop the ""virtual"" specifier; it is redundant.",OPEN,5min,5min,trevor.bakker@uta.edu,"api-design,cppcoreguidelines,since-c++11",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d1P6D22xePu4v4R,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_component_info.cpp,Heimdall-SBOM_heimdall,tests/test_component_info.cpp,23,"Member variables should not be ""protected"".",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d1P6D22xePu4v4T,cpp:S6177,MINOR,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_component_info.cpp,Heimdall-SBOM_heimdall,tests/test_component_info.cpp,127,"Reduce verbosity with ""using enum"" for ""heimdall::FileType"".",OPEN,2min,2min,trevor.bakker@uta.edu,since-c++20,2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d7m6D22xePu4wNc,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_metadata_extractor.cpp,Heimdall-SBOM_heimdall,tests/test_metadata_extractor.cpp,26,"Member variables should not be ""protected"".",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d486D22xePu4v5C,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_sbom_generator.cpp,Heimdall-SBOM_heimdall,tests/test_sbom_generator.cpp,25,"Member variables should not be ""protected"".",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
AZff4d5A6D22xePu4v5E,cpp:S3656,CRITICAL,CODE_SMELL,Heimdall-SBOM_heimdall:tests/test_utils.cpp,Heimdall-SBOM_heimdall,tests/test_utils.cpp,24,"Member variables should not be ""protected"".",OPEN,20min,20min,trevor.bakker@uta.edu,"based-on-misra,cppcoreguidelines,pitfall",2025-07-05T00:03:59+0000,2025-07-06T13:14:37+0000,
